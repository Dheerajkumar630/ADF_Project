{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "devdatafactorygeekcoders"
		},
		"AzureDataLakeStorage1_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage1'"
		},
		"AzureDataLakeStorage2_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage2'"
		},
		"Sink_AzureDataLakeStorage_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'Sink_AzureDataLakeStorage'"
		},
		"Source_Snowflake_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'Source_Snowflake'"
		},
		"AzureBlobStorage_sasUri": {
			"type": "secureString",
			"metadata": "Secure string for 'sasUri' of 'AzureBlobStorage'"
		},
		"AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://proggen2geekcoders.dfs.core.windows.net/"
		},
		"AzureDataLakeStorage2_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://proggen2geekcoders.dfs.core.windows.net/"
		},
		"AzureKeyVault_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://devvaultgeekcoders.vault.azure.net/"
		},
		"SRC_AzureDataLakeStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://sourcegen2geekcoders.dfs.core.windows.net/"
		},
		"SRC_AzureDataLakeStorage_properties_typeProperties_tenant": {
			"type": "string",
			"defaultValue": "7e981f09-7653-46a3-9089-57f571d7ec3f"
		},
		"SRC_AzureDataLakeStorage_properties_typeProperties_servicePrincipalId": {
			"type": "string",
			"defaultValue": "916492ca-6a50-40cf-b273-6081d781123e"
		},
		"Sink_AzureDataLakeStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://devgen2geekcoders.dfs.core.windows.net/"
		},
		"Source_API_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://countryapi.io/api/all"
		},
		"Source_Snowflake_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "SRC_GEEKCODERS"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Copy Activity Gen 2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "sink meta data",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "sink_metadata",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "Source meta data",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Source_meta_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"lastModified"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "sink meta data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('sink meta data').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "date_part",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Source meta data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"modifiedDatetimeStart": {
										"value": "@activity('Source meta data').output.lastModified",
										"type": "Expression"
									},
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Source_meta_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "sink_metadata",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"list_of_files": {
						"type": "String"
					},
					"files": {
						"type": "Array"
					},
					"date_part": {
						"type": "String"
					},
					"folder_name": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-01-03T15:33:56Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sink_metadata')]",
				"[concat(variables('factoryId'), '/datasets/Source_meta_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy Activity Rest Api')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Web1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "MergeFiles"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "RestResource1",
								"type": "DatasetReference",
								"parameters": {
									"Relative_url": {
										"value": "@activity('Web1').output.value",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Sink_json",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Web1",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://devvaultgeekcoders.vault.azure.net/secrets/src-rest-api-key/287931783a8b41898dd114286460749e?api-version=7.5",
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"folder_name": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-01-03T15:33:56Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RestResource1')]",
				"[concat(variables('factoryId'), '/datasets/Sink_json')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy Activity Snowflake')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeV2Source",
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SnowflakeTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Snowflake_parquet",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"folder_name": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-01-03T15:33:56Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SnowflakeTable')]",
				"[concat(variables('factoryId'), '/datasets/Snowflake_parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Master Ingestion')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Copy Activity Gen 2",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Pipeline2",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Copy Activity Snowflake",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Pipeline3",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Copy Activity Rest Api",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Send Email Notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Pipeline2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Send Email Notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Status": "Success"
							}
						}
					},
					{
						"name": "Send Email Notification_copy2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Pipeline1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Send Email Notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Status": "Failure"
							}
						}
					},
					{
						"name": "Send Email Notification_copy3",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Pipeline3",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Send Email Notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Status": "Success"
							}
						}
					},
					{
						"name": "Send Email Notification_copy4",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Pipeline1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Send Email Notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Status": "Success"
							}
						}
					},
					{
						"name": "Send Email Notification_copy2_copy1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Pipeline2",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Send Email Notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Status": "Failure"
							}
						}
					},
					{
						"name": "Send Email Notification_copy2_copy1_copy1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Pipeline3",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Send Email Notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Status": "Failure"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"folder_name": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-01-03T15:52:23Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Copy Activity Gen 2')]",
				"[concat(variables('factoryId'), '/pipelines/Copy Activity Snowflake')]",
				"[concat(variables('factoryId'), '/pipelines/Copy Activity Rest Api')]",
				"[concat(variables('factoryId'), '/pipelines/Send Email Notification')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Master pipeline Gen 2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Activity Gen 2",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Copy Activity Gen 2",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Transformation Gen 2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Copy Activity Gen 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Transformation Gen 2",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Send Email Notification_copy4",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Copy Activity Gen 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Send Email Notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Status": "Success",
								"PipeLineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"PipeLineRunBy": {
									"value": "@pipeline()?.TriggeredByPipelineName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Send Email Notification_copy4_copy1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Transformation Gen 2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Send Email Notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Status": "Success",
								"PipeLineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"PipeLineRunBy": {
									"value": "@pipeline()?.TriggeredByPipelineName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Send Email Notification_copy2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Copy Activity Gen 2",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Send Email Notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Status": "Failure",
								"PipeLineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"PipeLineRunBy": {
									"value": "@pipeline()?.TriggeredByPipelineName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Send Email Notification_copy2_copy1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Transformation Gen 2",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Send Email Notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Status": "Failure",
								"PipeLineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"PipeLineRunBy": {
									"value": "@pipeline()?.TriggeredByPipelineName",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"folder_name": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-01-03T15:52:23Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Copy Activity Gen 2')]",
				"[concat(variables('factoryId'), '/pipelines/Transformation Gen 2')]",
				"[concat(variables('factoryId'), '/pipelines/Send Email Notification')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Master pipeline snowflake')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Activity Snowflake",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Copy Activity Snowflake",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Transformation Snowflake",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Copy Activity Snowflake",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Transformation Snowflake",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Send Email Notification_copy4_copy1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Copy Activity Snowflake",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Send Email Notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Status": "Success",
								"PipeLineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"PipeLineRunBy": {
									"value": "@pipeline()?.TriggeredByPipelineName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Send Email Notification_copy4_copy1_copy1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Transformation Snowflake",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Send Email Notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Status": "Success",
								"PipeLineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"PipeLineRunBy": {
									"value": "@pipeline()?.TriggeredByPipelineName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Send Email Notification_copy2_copy1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Copy Activity Snowflake",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Send Email Notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Status": "Failure",
								"PipeLineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"PipeLineRunBy": {
									"value": "@pipeline()?.TriggeredByPipelineName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Send Email Notification_copy2_copy1_copy1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Transformation Snowflake",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Send Email Notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Status": "Failure",
								"PipeLineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"PipeLineRunBy": {
									"value": "@pipeline()?.TriggeredByPipelineName",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-01-03T15:52:23Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Copy Activity Snowflake')]",
				"[concat(variables('factoryId'), '/pipelines/Transformation Snowflake')]",
				"[concat(variables('factoryId'), '/pipelines/Send Email Notification')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Master pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Master pipeline Gen 2",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Master pipeline Gen 2",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Master pipeline snowflake",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Master pipeline snowflake",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Copy Activity Rest Api",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Copy Activity Rest Api",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-01-03T15:55:33Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Master pipeline Gen 2')]",
				"[concat(variables('factoryId'), '/pipelines/Master pipeline snowflake')]",
				"[concat(variables('factoryId'), '/pipelines/Copy Activity Rest Api')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Send Email Notification')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Web1",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {},
							"url": "https://prod-06.eastus.logic.azure.com:443/workflows/da998fd00a66426f9b7844e413ab7d07/triggers/When_a_HTTP_request_is_received/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2FWhen_a_HTTP_request_is_received%2Frun&sv=1.0&sig=y-fhdjUmZFe7BkqoNnwD4Vv0_hlAwSlTsBnc0PKKeFs",
							"body": {
								"value": "{\n\"Status\":\"@{pipeline().parameters.Status}\",\n\"PipeLineName\":\"@{pipeline().parameters.PipeLineName}\",\n\"PipeLineRunBy\":\"@{pipeline().parameters.PipeLineRunBy}\",\n\"ExecutionTime\":\"@{pipeline().TriggerTime}\",\n\"PipelineTriggerName\":\"@{pipeline().TriggerName}\",\n\"DataFactoryName\":\"@{pipeline().DataFactory}\"\n}",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Status": {
						"type": "string"
					},
					"PipeLineName": {
						"type": "string"
					},
					"PipeLineRunBy": {
						"type": "string"
					}
				},
				"variables": {
					"folder_name": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-01-03T15:52:23Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Transformation Gen 2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "sink_metadata",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "folder_name",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Atheletes",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Atheletes",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {
										"source_file_name": "Athletes.csv",
										"folder_name": {
											"value": "@variables('folder_name')",
											"type": "Expression"
										}
									},
									"sink1": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "integrationRuntimedheeraj",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Coaches",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Coaches",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {
										"source_file_name": "Coaches.csv",
										"folder_name": {
											"value": "@variables('folder_name')",
											"type": "Expression"
										}
									},
									"sink1": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "integrationRuntimedheeraj",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "EntriesGender",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "EntriesGender",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {
										"source_file_name": "EntriesGender.parquet",
										"folder_name": {
											"value": "@variables('folder_name')",
											"type": "Expression"
										}
									},
									"sink1": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "integrationRuntimedheeraj",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "medals",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "medals",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {
										"source_file_name": "Medals.csv",
										"folder_name": {
											"value": "@variables('folder_name')",
											"type": "Expression"
										}
									},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"folder_name": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-01-03T15:33:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sink_metadata')]",
				"[concat(variables('factoryId'), '/dataflows/Atheletes')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntimedheeraj')]",
				"[concat(variables('factoryId'), '/dataflows/Coaches')]",
				"[concat(variables('factoryId'), '/dataflows/EntriesGender')]",
				"[concat(variables('factoryId'), '/dataflows/medals')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Transformation Snowflake')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Parquet_snowflake_metadata",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "ParquetReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "folder_name",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Teams",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Teams",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "integrationRuntimedheeraj",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"folder_name": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-01-03T15:33:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Parquet_snowflake_metadata')]",
				"[concat(variables('factoryId'), '/dataflows/Teams')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntimedheeraj')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Parquet_snowflake_metadata')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "snowflake",
						"container": "blob"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "TEAMNAME",
						"type": "UTF8"
					},
					{
						"name": "DISCIPLINE",
						"type": "UTF8"
					},
					{
						"name": "COUNTRY",
						"type": "UTF8"
					},
					{
						"name": "EVENT",
						"type": "UTF8"
					},
					{
						"name": "Date_Part",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Pub_gen2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Teams",
						"fileSystem": "olympicsdata"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Raw_DelimitedText_Gen2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Sink_AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"source_file_name": {
						"type": "string"
					},
					"folder_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().source_file_name",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@concat('Gen2','/',dataset().folder_name)",
							"type": "Expression"
						},
						"fileSystem": "olympicdata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "PersonName",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					},
					{
						"name": "Discipline",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Sink_AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestResource1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Source_API",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Relative_url": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "@dataset().Relative_url",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Source_API')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SRC')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SRC_AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folder_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().folder_name",
							"type": "Expression"
						},
						"fileSystem": "olympicsdata"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SRC_AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sink_Parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Sink_AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Teams.Parquet",
						"folderPath": {
							"value": "@concat('snowflake/Date_Part=',formatDateTime(utcnow(),'yyyy-MM-dd'))",
							"type": "Expression"
						},
						"fileSystem": "olympicdata"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "Discipline",
						"type": "UTF8"
					},
					{
						"name": "Female",
						"type": "INT_64"
					},
					{
						"name": "Male",
						"type": "INT_64"
					},
					{
						"name": "Total",
						"type": "INT_64"
					},
					{
						"name": "Date_Part",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Sink_AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sink_json')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Sink_AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "countries.json",
						"folderPath": {
							"value": "@concat('RestApi/Date_Part=',formatDateTime(utcnow(),'yyyy-MM-dd'))",
							"type": "Expression"
						},
						"fileSystem": "olympicdata"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Sink_AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SnowflakeTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Source_Snowflake",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SnowflakeV2Table",
				"schema": [
					{
						"name": "TEAMNAME",
						"type": "VARCHAR"
					},
					{
						"name": "DISCIPLINE",
						"type": "VARCHAR"
					},
					{
						"name": "COUNTRY",
						"type": "VARCHAR"
					},
					{
						"name": "EVENT",
						"type": "VARCHAR"
					}
				],
				"typeProperties": {
					"schema": "OLY",
					"table": "TEAMS"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Source_Snowflake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Snowflake_parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "teams.parquet",
						"folderPath": {
							"value": "@concat('snowflake','/','Date_Part=',formatDateTime(utcnow(),'yyyy-MM-dd'))",
							"type": "Expression"
						},
						"container": "blob"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source_meta_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SRC_AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "olympicsdata"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SRC_AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/parquet_gen2_new')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Sink_AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"source_file_name": {
						"type": "string"
					},
					"folder_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().source_file_name",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@concat('Gen2','/',dataset().folder_name)",
							"type": "Expression"
						},
						"fileSystem": "olympicdata"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "Discipline",
						"type": "UTF8"
					},
					{
						"name": "Female",
						"type": "INT_64"
					},
					{
						"name": "Male",
						"type": "INT_64"
					},
					{
						"name": "Total",
						"type": "INT_64"
					},
					{
						"name": "Date_Part",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Sink_AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Sink_AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"sink_directory": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@concat('Date_Part=',formatDateTime(utcnow(),'yyyy-MM-dd'))",
							"type": "Expression"
						},
						"fileSystem": "olympicdata"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Sink_AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sink_metadata')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Sink_AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Gen2",
						"fileSystem": "olympicdata"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Sink_AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": "[parameters('AzureBlobStorage_sasUri')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage1_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage2_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage2_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureKeyVault')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureKeyVault_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SRC_AzureDataLakeStorage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('SRC_AzureDataLakeStorage_properties_typeProperties_url')]",
					"tenant": "[parameters('SRC_AzureDataLakeStorage_properties_typeProperties_tenant')]",
					"servicePrincipalId": "[parameters('SRC_AzureDataLakeStorage_properties_typeProperties_servicePrincipalId')]",
					"servicePrincipalCredentialType": "ServicePrincipalKey",
					"servicePrincipalCredential": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "client-secret"
					}
				},
				"connectVia": {
					"referenceName": "integrationRuntimedheeraj",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntimedheeraj')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sink_AzureDataLakeStorage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('Sink_AzureDataLakeStorage_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('Sink_AzureDataLakeStorage_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source_API')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('Source_API_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				},
				"connectVia": {
					"referenceName": "integrationRuntimedheeraj",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntimedheeraj')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source_Snowflake')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SnowflakeV2",
				"typeProperties": {
					"authenticationType": "Basic",
					"accountIdentifier": "bxwlrgz-yo64105",
					"user": "DHEERAJ9849277818",
					"database": "[parameters('Source_Snowflake_properties_typeProperties_database')]",
					"warehouse": "COMPUTE_WH",
					"role": "ACCOUNTADMIN",
					"password": {
						"type": "SecureString",
						"value": "[parameters('Source_Snowflake_password')]"
					}
				},
				"connectVia": {
					"referenceName": "integrationRuntimedheeraj",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntimedheeraj')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/integrationRuntimedheeraj')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "East US",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 10,
							"cleanup": false,
							"customProperties": []
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Atheletes')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Raw_DelimitedText_Gen2",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Pub_gen2",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          PersonName as string,",
						"          Country as string,",
						"          Discipline as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     partitionBy('hash', 1)) ~> source1",
						"source1 derive(PersonName = lower(PersonName),",
						"     partitionBy('hash', 1)) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Raw_DelimitedText_Gen2')]",
				"[concat(variables('factoryId'), '/datasets/Pub_gen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Coaches')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Raw_DelimitedText_Gen2",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Pub_gen2",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Name as string,",
						"          Country as string,",
						"          Discipline as string,",
						"          Event as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 derive(Name = lower(Name),",
						"          Event = iifNull(Event,'NA'),",
						"     partitionBy('hash', 1)) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Raw_DelimitedText_Gen2')]",
				"[concat(variables('factoryId'), '/datasets/Pub_gen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EntriesGender')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "parquet_gen2_new",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Pub_gen2",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "cast1"
						},
						{
							"name": "cast2"
						},
						{
							"name": "cast3"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Discipline as string,",
						"          Female as long,",
						"          Male as long,",
						"          Total as long,",
						"          Date_Part as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet',",
						"     partitionBy('hash', 1)) ~> source1",
						"source1 cast(output(",
						"          Female as integer",
						"     ),",
						"     errors: true) ~> cast1",
						"cast1 cast(output(",
						"          Male as integer",
						"     ),",
						"     errors: true) ~> cast2",
						"cast2 cast(output(",
						"          Total as integer",
						"     ),",
						"     errors: true) ~> cast3",
						"cast3 select(mapColumn(",
						"          Discipline,",
						"          Female,",
						"          Male,",
						"          Total",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/parquet_gen2_new')]",
				"[concat(variables('factoryId'), '/datasets/Pub_gen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Teams')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Snowflake_parquet",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Pub_gen2",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "aggregate1"
						},
						{
							"name": "cast1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          TEAMNAME as string,",
						"          DISCIPLINE as string,",
						"          COUNTRY as string,",
						"          EVENT as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> source1",
						"source1 aggregate(groupBy(TEAMNAME,",
						"          DISCIPLINE,",
						"          COUNTRY),",
						"     Total_Events = countDistinct(EVENT)) ~> aggregate1",
						"aggregate1 cast(output(",
						"          Total_Events as integer",
						"     ),",
						"     errors: true) ~> cast1",
						"cast1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Snowflake_parquet')]",
				"[concat(variables('factoryId'), '/datasets/Pub_gen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/medals')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Raw_DelimitedText_Gen2",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Pub_gen2",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "rank1"
						},
						{
							"name": "rank2"
						},
						{
							"name": "rank3"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Rank as short,",
						"          Team_Country as string,",
						"          Gold as short,",
						"          Silver as short,",
						"          Bronze as short,",
						"          Total as short,",
						"          {Rank by Total} as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     partitionBy('hash', 1)) ~> source1",
						"source1 rank(desc(Gold, true),",
						"     caseInsensitive: true,",
						"     output(Rank_by_Gold as long),",
						"     dense: true,",
						"     partitionBy('hash', 1)) ~> rank1",
						"rank1 rank(desc(Silver, true),",
						"     caseInsensitive: true,",
						"     output(Rank_by_Silver as long),",
						"     dense: true,",
						"     partitionBy('hash', 1)) ~> rank2",
						"rank2 rank(desc(Bronze, true),",
						"     caseInsensitive: true,",
						"     output(Rank_by_Bronze as long),",
						"     dense: true,",
						"     partitionBy('hash', 1)) ~> rank3",
						"rank3 select(mapColumn(",
						"          Rank,",
						"          Team_Country,",
						"          Gold,",
						"          Silver,",
						"          Bronze,",
						"          Total,",
						"          Rank_by_Total = {Rank by Total},",
						"          Rank_by_Gold,",
						"          Rank_by_Silver,",
						"          Rank_by_Bronze",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Raw_DelimitedText_Gen2')]",
				"[concat(variables('factoryId'), '/datasets/Pub_gen2')]"
			]
		}
	]
}